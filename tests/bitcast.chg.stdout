expr @ 1:23 1:30 => extern "intrinsic" fn bitcast(...)
expr @ 1:31 1:32 => i32
expr @ 1:23 1:33 => i32
expr @ 1:16 1:33 => never
expr @ 1:14 2:0 => void
expr @ 2:23 2:30 => extern "intrinsic" fn bitcast(...)
expr @ 2:37 2:38 => i32
expr @ 2:31 2:40 => {x: i32}
expr @ 2:23 2:41 => i32
expr @ 2:16 2:41 => never
expr @ 2:14 3:0 => void
expr @ 3:29 3:36 => extern "intrinsic" fn bitcast(...)
expr @ 3:37 3:38 => i32
expr @ 3:29 3:39 => {x: i32}
expr @ 3:22 3:39 => never
expr @ 3:20 4:0 => void
expr @ 6:12 6:14 => fn t1(...)
expr @ 6:12 6:16 => i32
expr @ 6:19 6:21 => fn t2(...)
expr @ 6:19 6:23 => i32
expr @ 6:12 6:23 => i32
expr @ 6:26 6:28 => fn t3(...)
expr @ 6:26 6:30 => {x: i32}
expr @ 6:26 6:32 => i32
expr @ 6:12 6:32 => i32
expr @ 6:5 6:32 => never
expr @ 5:16 8:1 => void



define i32 @t1() {
prologue:
%l.0 = alloca i32
br label %bb.0

bb.0:
%t.0 = alloca i32
store i32 1, i32* %t.0
%t.1 = bitcast i32* %t.0 to i32*
%l.1 = load i32, i32* %t.1
store i32 %l.1, i32* %l.0
%ret.2 = load i32, i32* %l.0
ret i32 %ret.2

}

define i32 @t2() {
prologue:
%l.0 = alloca i32
br label %bb.0

bb.0:
%t.0 = alloca {i32}
%p.1 = getelementptr {i32}, {i32}* %t.0, i32 0, i32 0
store i32 2, i32* %p.1
%t.2 = load {i32}, {i32}* %t.0
%t.3 = alloca {i32}
store {i32} %t.2, {i32}* %t.3
%t.4 = bitcast {i32}* %t.3 to i32*
%l.1 = load i32, i32* %t.4
store i32 %l.1, i32* %l.0
%ret.5 = load i32, i32* %l.0
ret i32 %ret.5

}

define {i32} @t3() {
prologue:
%l.0 = alloca {i32}
br label %bb.0

bb.0:
%t.0 = alloca i32
store i32 3, i32* %t.0
%t.1 = bitcast i32* %t.0 to {i32}*
%l.1 = load {i32}, {i32}* %t.1
store {i32} %l.1, {i32}* %l.0
%ret.2 = load {i32}, {i32}* %l.0
ret {i32} %ret.2

}

define i32 @main() {
prologue:
%l.0 = alloca i32
br label %bb.0

bb.0:
%l.1 = call i32 @t1()
br label %bb.1

bb.1:
%l.2 = call i32 @t2()
br label %bb.2

bb.2:
%l.3 = add i32 %l.1, %l.2
%l.4 = call {i32} @t3()
br label %bb.3

bb.3:
%t.0 = alloca {i32}
store {i32} %l.4, {i32}* %t.0
%t.1 = getelementptr {i32}, {i32}* %t.0, i32 0, i32 0
%l.5 = load i32, i32* %t.1
%l.6 = add i32 %l.3, %l.5
store i32 %l.6, i32* %l.0
%ret.2 = load i32, i32* %l.0
ret i32 %ret.2

}


