fallback @ 4:14 4:15
fallback @ 4:18 4:19
fallback @ 5:14 5:15
fallback @ 5:18 5:19
fallback @ 6:18 7:0
expr @ 2:13 2:14 => i64
expr @ 2:19 2:20 => i64
expr @ 2:17 2:22 => i64
expr @ 2:13 2:22 => i64
expr @ 3:19 3:20 => i32
expr @ 4:14 4:15 => i32
expr @ 4:18 4:19 => i32
expr @ 4:14 4:19 => i32
expr @ 5:14 5:15 => i32
expr @ 5:18 5:19 => i32
expr @ 5:14 5:19 => i32
expr @ 6:18 7:0 => i32
expr @ 3:13 7:6 => i32
expr @ 8:12 8:13 => i64
expr @ 8:26 8:27 => i64
expr @ 8:29 8:30 => i64
expr @ 8:16 8:32 => i64
expr @ 8:12 8:32 => i64
expr @ 8:35 8:36 => i64
expr @ 8:12 8:36 => i64
expr @ 8:5 8:36 => never
expr @ 1:16 10:1 => ()



define i64 @main() {
prologue:
%l.0 = alloca i64
%l.1 = alloca i64
%l.3 = alloca i32
%l.4 = alloca i32
%l.9 = alloca i32
%l.12 = alloca i64
br label %bb.0

bb.0:
%l.2 = add i64 1, 2
store i64 %l.2, i64* %l.1
br label %bb.1

bb.1:
%l.5 = icmp eq i32 1, 1
br i1 %l.5, label %bb.4, label %bb.2

bb.2:
%l.7 = icmp eq i32 1, 2
br i1 %l.7, label %bb.5, label %bb.3

bb.3:
br label %bb.6

bb.4:
%l.6 = add i32 1, 2
store i32 %l.6, i32* %l.4
br label %bb.7

bb.5:
%l.8 = add i32 2, 3
store i32 %l.8, i32* %l.4
br label %bb.7

bb.6:
store i32 1, i32* %l.9
store i32 4, i32* %l.4
br label %bb.7

bb.7:
%l.10 = load i32, i32* %l.4
store i32 %l.10, i32* %l.3
%l.11 = load i64, i64* %l.1
store i64 3, i64* %l.12
%l.13 = load i64, i64* %l.12
%l.14 = mul i64 %l.11, %l.13
%l.15 = load i64, i64* %l.12
%l.16 = add i64 %l.14, %l.15
store i64 %l.16, i64* %l.0
%ret.0 = load i64, i64* %l.0
ret i64 %ret.0

}


