expr @ 2:18 2:19 => i32
expr @ 2:22 2:23 => i32
expr @ 2:18 2:23 => i32
expr @ 2:28 2:29 => i32
expr @ 2:12 2:31 => {x: i32,y: i32}
expr @ 2:5 2:31 => never
expr @ 1:51 4:0 => void
expr @ 6:12 6:24 => fn simpleRecord(...)
expr @ 6:25 6:27 => i32
expr @ 6:12 6:28 => {x: i32,y: i32}
expr @ 6:12 6:30 => i32
expr @ 6:33 6:45 => fn simpleRecord(...)
expr @ 6:46 6:48 => i32
expr @ 6:33 6:49 => {x: i32,y: i32}
expr @ 6:33 6:51 => i32
expr @ 6:12 6:51 => i32
expr @ 6:5 6:51 => never
expr @ 5:22 8:1 => void

define {i32, i32} @simpleRecord(i32 %lt.1) {
prologue:
%l.0 = alloca {i32, i32}
%l.1 = alloca i32
store i32 %lt.1, i32* %l.1
br label %bb.0

bb.0:
%l.2 = load i32, i32* %l.1
%l.3 = mul i32 %l.2, 2
%l.4 = load i32, i32* %l.1
%t.0 = alloca {i32, i32}
%p.1 = getelementptr {i32, i32}, {i32, i32}* %t.0, i32 0, i32 0
store i32 %l.3, i32* %p.1
%p.2 = getelementptr {i32, i32}, {i32, i32}* %t.0, i32 0, i32 1
store i32 %l.4, i32* %p.2
%t.3 = load {i32, i32}, {i32, i32}* %t.0
store {i32, i32} %t.3, {i32, i32}* %l.0
%ret.4 = load {i32, i32}, {i32, i32}* %l.0
ret {i32, i32} %ret.4

}

define i32 @main() {
prologue:
%l.0 = alloca i32
br label %bb.0

bb.0:
%l.1 = call {i32, i32} @simpleRecord(i32 10)
br label %bb.1

bb.1:
%t.0 = alloca {i32, i32}
store {i32, i32} %l.1, {i32, i32}* %t.0
%t.1 = getelementptr {i32, i32}, {i32, i32}* %t.0, i32 0, i32 0
%l.2 = load i32, i32* %t.1
%l.3 = call {i32, i32} @simpleRecord(i32 20)
br label %bb.2

bb.2:
%t.2 = alloca {i32, i32}
store {i32, i32} %l.3, {i32, i32}* %t.2
%t.3 = getelementptr {i32, i32}, {i32, i32}* %t.2, i32 0, i32 1
%l.4 = load i32, i32* %t.3
%l.5 = add i32 %l.2, %l.4
store i32 %l.5, i32* %l.0
%ret.4 = load i32, i32* %l.0
ret i32 %ret.4

}


