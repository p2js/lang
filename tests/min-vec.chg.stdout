fallback @ 10:28 10:29
fallback @ 19:16 19:18
expr @ 10:20 10:27 => extern "intrinsic" fn bitcast(...)
expr @ 10:28 10:29 => i32
expr @ 10:20 10:30 => T*
expr @ 10:37 10:38 => u64
expr @ 10:48 10:49 => u64
expr @ 10:12 10:54 => {ptr: T*,len: u64,cap: u64}
expr @ 10:5 10:54 => never
expr @ 9:23 12:0 => ()
expr @ 14:12 14:13 => i32
expr @ 14:5 14:13 => never
expr @ 13:41 16:0 => ()
expr @ 18:15 18:20 => fn mkVec(...)
expr @ 18:15 18:22 => Vec<i32>
expr @ 19:5 19:9 => fn push(...)
expr @ 19:11 19:14 => Vec<i32>
expr @ 19:10 19:14 => Vec<i32>*
expr @ 19:16 19:18 => i32
expr @ 19:5 19:19 => i32
expr @ 20:12 20:13 => i32
expr @ 20:5 20:13 => never
expr @ 17:16 22:1 => ()



define {i32*, i64, i64} @mkVec$LT$i32$GT$() {
prologue:
%l.0 = alloca {i32*, i64, i64}
br label %bb.0

bb.0:
%t.0 = alloca i32
store i32 0, i32* %t.0
%t.1 = bitcast i32* %t.0 to i32**
%l.1 = load i32*, i32** %t.1
%t.2 = alloca {i32*, i64, i64}
%p.3 = getelementptr {i32*, i64, i64}, {i32*, i64, i64}* %t.2, i32 0, i32 0
store i32* %l.1, i32** %p.3
%p.4 = getelementptr {i32*, i64, i64}, {i32*, i64, i64}* %t.2, i32 0, i32 1
store i64 0, i64* %p.4
%p.5 = getelementptr {i32*, i64, i64}, {i32*, i64, i64}* %t.2, i32 0, i32 2
store i64 0, i64* %p.5
%t.6 = load {i32*, i64, i64}, {i32*, i64, i64}* %t.2
store {i32*, i64, i64} %t.6, {i32*, i64, i64}* %l.0
%ret.7 = load {i32*, i64, i64}, {i32*, i64, i64}* %l.0
ret {i32*, i64, i64} %ret.7

}

define i32 @push$LT$i32$GT$({i32*, i64, i64}* %lt.1, i32 %lt.2) {
prologue:
%l.0 = alloca i32
%l.1 = alloca {i32*, i64, i64}*
%l.2 = alloca i32
store {i32*, i64, i64}* %lt.1, {i32*, i64, i64}** %l.1
store i32 %lt.2, i32* %l.2
br label %bb.0

bb.0:
store i32 0, i32* %l.0
%ret.0 = load i32, i32* %l.0
ret i32 %ret.0

}

define i32 @main() {
prologue:
%l.0 = alloca i32
%l.1 = alloca {i32*, i64, i64}
br label %bb.0

bb.0:
%l.2 = call {i32*, i64, i64} @mkVec$LT$i32$GT$()
br label %bb.1

bb.1:
store {i32*, i64, i64} %l.2, {i32*, i64, i64}* %l.1
%l.4 = bitcast {i32*, i64, i64}* %l.1 to {i32*, i64, i64}*
%l.3 = call i32 @push$LT$i32$GT$({i32*, i64, i64}* %l.4, i32 42)
br label %bb.2

bb.2:
store i32 0, i32* %l.0
%ret.0 = load i32, i32* %l.0
ret i32 %ret.0

}


