use root::std::vec::Vec;
use root::std::str::StrRepr;
use root::std::libc::memcpy;
use root::std::ptr;

type String = Vec<u8>;

impl String {
    fn new(): Self {
        return Vec::new();
    }

    fn with_capacity(cap: u64): Self {
        return Vec::with_capacity(cap);
    }

    fn from_vec(vec: Vec<u8>): Self {
        return vec;
    }

    fn as_str(self*): str* {
        return str::from_raw_parts(self*.ptr, self*.len);
    }

    fn len(self*): u64 {
        return self*.len;
    }

    fn push_byte(self*, b: u8) {
        Vec::push(self, b);
    }
}

fn str_concat(s1: str*, s2: str*): String {
  let res = Vec::with_capacity(s1.len() + s2.len());

  memcpy(ptr::cast::<u8, ()>(res.ptr), ptr::cast::<u8, ()>(s1.as_ptr()), s1.len());
  memcpy(ptr::cast::<u8, ()>(ptr::add(res.ptr, s1.len())), ptr::cast::<u8, ()>(s2.as_ptr()), s2.len());
  res.len = s1.len() + s2.len();

  return res;
}
